{"version":3,"sources":["images/blank.png","App-utils.js","images/blue-candy.png","images/green-candy.png","images/orange-candy.png","images/purple-candy.png","images/red-candy.png","images/yellow-candy.png","App.js","index.js"],"names":["candyColors","randomColor","candy","Math","floor","random","length","checkForColumnOfFour","colorArray","isMatch","setScore","idx","idxArray","isColumnOfThree","every","index","isBlank","blank","forEach","s","checkForRowOfFour","notValid","includes","checkForColumnOfThree","checkForRowOfThree","moveIntoSquareBelow","App","useState","randomColorArray","setRandomColorArray","tileBeingDragged","setTileBeingDragged","tileBeingReplaced","setTileBeingReplaced","score","useEffect","i","width","push","createBoard","dragStart","e","target","dragDrop","dragEnd","tileDraggedId","parseInt","getAttribute","tileReplacedId","isValidMove","isColumnOfFour","isRowOfFour","isRowOfThree","count","useCallback","fns","reduce","f","g","pipe","timer","setInterval","clearInterval","Wrapper","Score","Game","map","color","Tile","src","alt","onDragStart","draggable","onDragOver","preventDefault","onDragEnter","onDragLeave","onDrop","onDragEnd","styled","div","h1","img","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.76c56d89.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/blank.fbcb9179.png\";","import blank from './images/blank.png'\r\nimport blueCandy from './images/blue-candy.png'\r\nimport greenCandy from './images/green-candy.png'\r\nimport orangeCandy from './images/orange-candy.png'\r\nimport purpleCandy from './images/purple-candy.png'\r\nimport redCandy from './images/red-candy.png'\r\nimport yellowCandy from './images/yellow-candy.png'\r\n\r\nconst candyColors = [\r\n  blueCandy,\r\n  greenCandy,\r\n  orangeCandy,\r\n  purpleCandy,\r\n  redCandy,\r\n  yellowCandy,\r\n]\r\nconst width = 8\r\nconst randomColor = (candy) => candy[Math.floor(Math.random() * candy.length)]\r\n\r\nexport const pipe = (...fns) =>\r\n  fns.reduce(\r\n    (f, g) =>\r\n      (...args) =>\r\n        g(f(...args))\r\n  )\r\n\r\nexport const createBoard = () => {\r\n  const randomColorArray = []\r\n  for (let i = 0; i < width * width; i++) {\r\n    randomColorArray.push(randomColor(candyColors))\r\n  }\r\n  return randomColorArray\r\n}\r\n\r\nexport const checkForColumnOfFour = ({ colorArray, isMatch, setScore }) => {\r\n  for (let idx = 0; idx <= 39; idx++) {\r\n    const idxArray = [idx, idx + 8, idx + 16, idx + 24]\r\n    const isColumnOfThree = idxArray.every(\r\n      (index) => colorArray[index] === colorArray[idx]\r\n    )\r\n    const isBlank = colorArray[idx] === blank\r\n    if (isColumnOfThree && !isBlank) {\r\n      // this changes randomColorArray, but does not cause DOM to update.\r\n      idxArray.forEach((index) => (colorArray[index] = blank))\r\n      isMatch = true\r\n      setScore((s) => s + 4)\r\n    }\r\n  }\r\n  return { colorArray, isMatch, setScore }\r\n}\r\n\r\nexport const checkForRowOfFour = ({ colorArray, isMatch, setScore }) => {\r\n  const notValid = [\r\n    5, 6, 7, 13, 14, 15, 21, 22, 23, 29, 30, 31, 37, 38, 39, 45, 46, 47, 53, 54,\r\n    55, 61, 62, 63,\r\n  ]\r\n  for (let idx = 0; idx < colorArray.length; idx++) {\r\n    // board end pieces that cannot make four of a kind.\r\n    if (!notValid.includes(idx)) {\r\n      const idxArray = [idx, idx + 1, idx + 2, idx + 3]\r\n      const isColumnOfThree = idxArray.every(\r\n        (index) => colorArray[index] === colorArray[idx]\r\n      )\r\n      const isBlank = colorArray[idx] === blank\r\n      if (isColumnOfThree && !isBlank) {\r\n        // this changes randomColorArray, but does not cause DOM to update.\r\n        idxArray.forEach((index) => (colorArray[index] = blank))\r\n        isMatch = true\r\n        setScore((s) => s + 4)\r\n      }\r\n    }\r\n  }\r\n  return { colorArray, isMatch, setScore }\r\n}\r\n\r\nexport const checkForColumnOfThree = ({ colorArray, isMatch, setScore }) => {\r\n  for (let idx = 0; idx <= 47; idx++) {\r\n    const idxArray = [idx, idx + 8, idx + 16]\r\n    const isColumnOfThree = idxArray.every(\r\n      (index) => colorArray[index] === colorArray[idx]\r\n    )\r\n    const isBlank = colorArray[idx] === blank\r\n    if (isColumnOfThree && !isBlank) {\r\n      // this changes colorArray, but does not cause DOM to update.\r\n      idxArray.forEach((index) => (colorArray[index] = blank))\r\n      isMatch = true\r\n      setScore((s) => s + 3)\r\n    }\r\n  }\r\n  return { colorArray, isMatch, setScore }\r\n}\r\n\r\nexport const checkForRowOfThree = ({ colorArray, isMatch, setScore }) => {\r\n  const notValid = [\r\n    6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55, 62, 63,\r\n  ]\r\n  for (let idx = 0; idx < colorArray.length; idx++) {\r\n    if (!notValid.includes(idx)) {\r\n      const idxArray = [idx, idx + 1, idx + 2]\r\n      const isColumnOfThree = idxArray.every(\r\n        (index) => colorArray[index] === colorArray[idx]\r\n      )\r\n      const isBlank = colorArray[idx] === blank\r\n      if (isColumnOfThree && !isBlank) {\r\n        idxArray.forEach((index) => (colorArray[index] = blank))\r\n        isMatch = true\r\n        setScore((s) => s + 3)\r\n      }\r\n    }\r\n  }\r\n  return { colorArray, isMatch, setScore }\r\n}\r\n\r\nexport const moveIntoSquareBelow = ({ colorArray, isMatch, setScore }) => {\r\n  //loop through all but last row. Find blank ones and move to top row.\r\n  for (let idx = 0; idx <= 55; idx++) {\r\n    // if blank is in first row, add random candy\r\n    const firstRow = [0, 1, 2, 3, 4, 5, 6, 7]\r\n    const isFirstRow = firstRow.includes(idx)\r\n    if (isFirstRow && colorArray[idx] === blank) {\r\n      colorArray[idx] = randomColor(candyColors)\r\n    }\r\n\r\n    //move all blanks up to top\r\n    if (colorArray[idx + 8] === blank) {\r\n      colorArray[idx + 8] = colorArray[idx]\r\n      colorArray[idx] = blank\r\n    }\r\n  }\r\n  return colorArray\r\n}\r\n","export default __webpack_public_path__ + \"static/media/blue-candy.73120c15.png\";","export default __webpack_public_path__ + \"static/media/green-candy.599f7016.png\";","export default __webpack_public_path__ + \"static/media/orange-candy.f106b2cd.png\";","export default __webpack_public_path__ + \"static/media/purple-candy.ae25b8a5.png\";","export default __webpack_public_path__ + \"static/media/red-candy.3658b37c.png\";","export default __webpack_public_path__ + \"static/media/yellow-candy.a3d87a9b.png\";","import { useState, useEffect } from 'react'\nimport { useCallback } from 'react/cjs/react.development'\nimport styled from 'styled-components/macro'\nimport {\n  createBoard,\n  checkForColumnOfFour,\n  checkForRowOfFour,\n  checkForColumnOfThree,\n  checkForRowOfThree,\n  moveIntoSquareBelow,\n  pipe,\n} from './App-utils'\n\nexport default function App() {\n  const [randomColorArray, setRandomColorArray] = useState([])\n  const [tileBeingDragged, setTileBeingDragged] = useState(null)\n  const [tileBeingReplaced, setTileBeingReplaced] = useState(null)\n  const [score, setScore] = useState(0)\n  const intervalDelay = 100\n\n  useEffect(() => {\n    // run once on load. Create initial randomColorArray board and add to state.\n    setRandomColorArray(createBoard())\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  const dragStart = (e) => setTileBeingDragged(e.target)\n\n  const dragDrop = (e) => setTileBeingReplaced(e.target)\n\n  const dragEnd = (e) => {\n    const colorArray = [...randomColorArray]\n    const tileDraggedId = parseInt(tileBeingDragged.getAttribute('data-id'))\n    const tileReplacedId = parseInt(tileBeingReplaced.getAttribute('data-id'))\n    colorArray[tileReplacedId] = tileBeingDragged.getAttribute('src')\n    colorArray[tileDraggedId] = tileBeingReplaced.getAttribute('src')\n\n    const validMoves = [\n      tileDraggedId - 1,\n      tileDraggedId + 1,\n      tileDraggedId - 8,\n      tileDraggedId + 8,\n    ]\n\n    const isValidMove = validMoves.includes(tileReplacedId)\n    const { isMatch: isColumnOfFour } = checkForColumnOfFour({\n      colorArray,\n      isMatch: false,\n      setScore,\n    })\n    const { isMatch: isRowOfFour } = checkForRowOfFour({\n      colorArray,\n      isMatch: false,\n      setScore,\n    })\n    const { isMatch: isColumnOfThree } = checkForColumnOfThree({\n      colorArray,\n      isMatch: false,\n      setScore,\n    })\n    const { isMatch: isRowOfThree } = checkForRowOfThree({\n      colorArray,\n      isMatch: false,\n      setScore,\n    })\n\n    // console.log(isColumnOfFour, isRowOfFour, isColumnOfThree, isRowOfThree)\n    if (\n      isValidMove &&\n      (isColumnOfFour || isRowOfFour || isColumnOfThree || isRowOfThree)\n    ) {\n      setRandomColorArray([...colorArray])\n    }\n  }\n\n  const count = useCallback(() => {\n    return pipe(\n      checkForColumnOfFour,\n      checkForRowOfFour,\n      checkForColumnOfThree,\n      checkForRowOfThree,\n      moveIntoSquareBelow\n    )({\n      colorArray: randomColorArray,\n      isMatch: false,\n      setScore,\n    })\n  }, [randomColorArray])\n  //run set interval and check board for matches\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setRandomColorArray([...count()])\n    }, intervalDelay)\n\n    // needed to update state and cause DOM re-render.\n    return () => clearInterval(timer)\n  }, [count])\n\n  // console.log(tileBeingDragged)\n  return (\n    <Wrapper>\n      <Score>Score: {score}</Score>\n      <Game>\n        {randomColorArray.map((color, idx) => (\n          <Tile\n            key={idx}\n            src={color}\n            alt={idx}\n            data-id={idx}\n            onDragStart={dragStart}\n            draggable={true}\n            onDragOver={(e) => e.preventDefault()}\n            onDragEnter={(e) => e.preventDefault()}\n            onDragLeave={(e) => e.preventDefault()}\n            onDrop={dragDrop}\n            onDragEnd={dragEnd}\n          />\n        ))}\n      </Game>\n    </Wrapper>\n  )\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 30px;\n  align-items: center;\n`\nconst Score = styled.h1`\n  font-weight: bold;\n`\nconst Game = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  width: 560px;\n  height: 560px;\n`\nconst Tile = styled.img`\n  width: 70px;\n  height: 70px;\n`\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}