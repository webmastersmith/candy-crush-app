{"version":3,"sources":["images/blank.png","images/blue-candy.png","images/green-candy.png","images/orange-candy.png","images/purple-candy.png","images/red-candy.png","images/yellow-candy.png","App.js","index.js"],"names":["App","useState","randomColorArray","setRandomColorArray","tileBeingDragged","setTileBeingDragged","tileBeingReplaced","setTileBeingReplaced","score","setScore","candyColors","useMemo","blueCandy","greenCandy","orangeCandy","purpleCandy","redCandy","yellowCandy","randomColor","candy","Math","floor","random","length","checkForColumnOfFour","useCallback","isMatch","idx","indexs","width","isColumnOfThree","every","index","isBlank","blank","forEach","s","checkForRowOfFour","notValid","includes","checkForColumnOfThree","checkForRowOfThree","isRowOfThree","moveIntoSquareBelow","useEffect","colorArray","i","push","dragStart","e","target","dragDrop","dragEnd","tileDraggedId","parseInt","getAttribute","tileReplacedId","isValidMove","isColumnOfFour","isRowOfFour","console","log","timer","setInterval","clearInterval","Wrapper","Score","Game","map","color","Tile","src","alt","onDragStart","draggable","onDragOver","preventDefault","onDragEnter","onDragLeave","onDrop","onDragEnd","styled","div","h1","img","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.20503e25.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/blank.fbcb9179.png\";","export default __webpack_public_path__ + \"static/media/blue-candy.73120c15.png\";","export default __webpack_public_path__ + \"static/media/green-candy.599f7016.png\";","export default __webpack_public_path__ + \"static/media/orange-candy.f106b2cd.png\";","export default __webpack_public_path__ + \"static/media/purple-candy.ae25b8a5.png\";","export default __webpack_public_path__ + \"static/media/red-candy.3658b37c.png\";","export default __webpack_public_path__ + \"static/media/yellow-candy.a3d87a9b.png\";","import { useState, useEffect, useMemo } from 'react'\nimport { useCallback } from 'react/cjs/react.development'\nimport styled from 'styled-components/macro'\nimport blank from './images/blank.png'\nimport blueCandy from './images/blue-candy.png'\nimport greenCandy from './images/green-candy.png'\nimport orangeCandy from './images/orange-candy.png'\nimport purpleCandy from './images/purple-candy.png'\nimport redCandy from './images/red-candy.png'\nimport yellowCandy from './images/yellow-candy.png'\n\nexport default function App() {\n  const [randomColorArray, setRandomColorArray] = useState([])\n  const [tileBeingDragged, setTileBeingDragged] = useState(null)\n  const [tileBeingReplaced, setTileBeingReplaced] = useState(null)\n  const [score, setScore] = useState(0)\n  const intervalDelay = 100\n\n  const candyColors = useMemo(\n    () => [\n      blueCandy,\n      greenCandy,\n      orangeCandy,\n      purpleCandy,\n      redCandy,\n      yellowCandy,\n    ],\n    []\n  )\n  const width = 8\n  const randomColor = (candy) => candy[Math.floor(Math.random() * candy.length)]\n\n  const checkForColumnOfFour = useCallback(() => {\n    let isMatch = false\n    for (let idx = 0; idx <= 39; idx++) {\n      const indexs = [idx, idx + width, idx + width * 2, idx + width * 3]\n      const isColumnOfThree = indexs.every(\n        (index) => randomColorArray[index] === randomColorArray[idx]\n      )\n      const isBlank = randomColorArray[idx] === blank\n      if (isColumnOfThree && !isBlank) {\n        // this changes randomColorArray, but does not cause DOM to update.\n        indexs.forEach((index) => (randomColorArray[index] = blank))\n        isMatch = true\n        setScore((s) => s + 4)\n      }\n    }\n    return isMatch\n  }, [randomColorArray])\n\n  const checkForRowOfFour = useCallback(() => {\n    let isMatch = false\n    const notValid = [\n      5, 6, 7, 13, 14, 15, 21, 22, 23, 29, 30, 31, 37, 38, 39, 45, 46, 47, 53,\n      54, 55, 61, 62, 63,\n    ]\n    for (let idx = 0; idx < randomColorArray.length; idx++) {\n      // board end pieces that cannot make four of a kind.\n      if (!notValid.includes(idx)) {\n        const indexs = [idx, idx + 1, idx + 2, idx + 3]\n        const isColumnOfThree = indexs.every(\n          (index) => randomColorArray[index] === randomColorArray[idx]\n        )\n        const isBlank = randomColorArray[idx] === blank\n        if (isColumnOfThree && !isBlank) {\n          // this changes randomColorArray, but does not cause DOM to update.\n          indexs.forEach((index) => (randomColorArray[index] = blank))\n          isMatch = true\n          setScore((s) => s + 4)\n        }\n      }\n    }\n    return isMatch\n  }, [randomColorArray])\n\n  const checkForColumnOfThree = useCallback(() => {\n    let isMatch = false\n    for (let idx = 0; idx <= 47; idx++) {\n      const indexs = [idx, idx + width, idx + width * 2]\n      const isColumnOfThree = indexs.every(\n        (index) => randomColorArray[index] === randomColorArray[idx]\n      )\n      const isBlank = randomColorArray[idx] === blank\n      if (isColumnOfThree && !isBlank) {\n        indexs.forEach((index) => (randomColorArray[index] = blank))\n        isMatch = true\n        setScore((s) => s + 3)\n      }\n    }\n    return isMatch\n  }, [randomColorArray])\n\n  const checkForRowOfThree = useCallback(() => {\n    let isMatch = false\n    const notValid = [\n      6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55, 62, 63,\n    ]\n    for (let idx = 0; idx < randomColorArray.length; idx++) {\n      if (!notValid.includes(idx)) {\n        const indexs = [idx, idx + 1, idx + 2]\n        const isRowOfThree = indexs.every(\n          (index) => randomColorArray[index] === randomColorArray[idx]\n        )\n        const isBlank = randomColorArray[idx] === blank\n        // console.log('is Row of three', isRowOfThree)\n        if (isRowOfThree && !isBlank) {\n          indexs.forEach((index) => (randomColorArray[index] = blank))\n          isMatch = true\n          setScore((s) => s + 3)\n        }\n      }\n    }\n    return isMatch\n  }, [randomColorArray])\n\n  const moveIntoSquareBelow = useCallback(() => {\n    //loop through all but last row. Find blank ones and move to top row.\n    for (let idx = 0; idx <= 55; idx++) {\n      // if blank is in first row, add random candy\n      const firstRow = [0, 1, 2, 3, 4, 5, 6, 7]\n      const isFirstRow = firstRow.includes(idx)\n      if (isFirstRow && randomColorArray[idx] === blank) {\n        randomColorArray[idx] = randomColor(candyColors)\n      }\n\n      //move all blanks up to top\n      if (randomColorArray[idx + 8] === blank) {\n        randomColorArray[idx + 8] = randomColorArray[idx]\n        randomColorArray[idx] = blank\n      }\n    }\n  }, [randomColorArray, candyColors])\n\n  // run once on load. Create initial randomColorArray board and add to state.\n  useEffect(() => {\n    const colorArray = []\n    for (let i = 0; i < width * width; i++) {\n      colorArray.push(randomColor(candyColors))\n    }\n    setRandomColorArray(colorArray)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  const dragStart = (e) => setTileBeingDragged(e.target)\n  const dragDrop = (e) => setTileBeingReplaced(e.target)\n  const dragEnd = (e) => {\n    const tileDraggedId = parseInt(tileBeingDragged.getAttribute('data-id'))\n    const tileReplacedId = parseInt(tileBeingReplaced.getAttribute('data-id'))\n    randomColorArray[tileReplacedId] = tileBeingDragged.getAttribute('src')\n    randomColorArray[tileDraggedId] = tileBeingReplaced.getAttribute('src')\n\n    const validMoves = [\n      tileDraggedId - 1,\n      tileDraggedId + 1,\n      tileDraggedId - width,\n      tileDraggedId + width,\n    ]\n\n    // check if move created a match of 4 or 3.\n    const isValidMove = validMoves.includes(tileReplacedId)\n    const isColumnOfFour = checkForColumnOfFour()\n    const isRowOfFour = checkForRowOfFour()\n    const isColumnOfThree = checkForColumnOfThree()\n    const isRowOfThree = checkForRowOfThree()\n\n    console.log(\n      isValidMove,\n      isColumnOfFour,\n      isRowOfFour,\n      isColumnOfThree,\n      isRowOfThree\n    )\n\n    if (\n      isValidMove &&\n      (isColumnOfFour || isRowOfFour || isColumnOfThree || isRowOfThree)\n    ) {\n    } else {\n      randomColorArray[tileReplacedId] = tileBeingReplaced.getAttribute('src')\n      randomColorArray[tileDraggedId] = tileBeingDragged.getAttribute('src')\n    }\n  }\n\n  //run set interval and check board for matches\n  useEffect(() => {\n    const timer = setInterval(() => {\n      checkForColumnOfFour()\n      checkForRowOfFour()\n      checkForColumnOfThree()\n      checkForRowOfThree()\n      moveIntoSquareBelow()\n      // needed to update state and cause DOM re-render.\n      setRandomColorArray([...randomColorArray])\n    }, intervalDelay)\n\n    return () => clearInterval(timer)\n  }, [\n    randomColorArray,\n    checkForColumnOfFour,\n    checkForRowOfFour,\n    checkForColumnOfThree,\n    checkForRowOfThree,\n    moveIntoSquareBelow,\n  ])\n\n  // console.log(tileBeingDragged)\n  return (\n    <Wrapper>\n      <Score>Score: {score}</Score>\n      <Game>\n        {randomColorArray.map((color, idx) => (\n          <Tile\n            key={idx}\n            src={color}\n            alt={idx}\n            data-id={idx}\n            onDragStart={dragStart}\n            draggable={true}\n            onDragOver={(e) => e.preventDefault()}\n            onDragEnter={(e) => e.preventDefault()}\n            onDragLeave={(e) => e.preventDefault()}\n            onDrop={dragDrop}\n            onDragEnd={dragEnd}\n          />\n        ))}\n      </Game>\n    </Wrapper>\n  )\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 30px;\n  align-items: center;\n`\nconst Score = styled.h1`\n  font-weight: bold;\n`\nconst Game = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  width: 560px;\n  height: 560px;\n`\nconst Tile = styled.img`\n  width: 70px;\n  height: 70px;\n`\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}