{"version":3,"sources":["images/blank.png","images/blue-candy.png","images/green-candy.png","images/orange-candy.png","images/purple-candy.png","images/red-candy.png","images/yellow-candy.png","App.js","index.js"],"names":["memo","useState","randomColorArray","setRandomColorArray","tileBeingDragged","setTileBeingDragged","tileBeingReplaced","setTileBeingReplaced","score","setScore","candyColors","useMemo","blueCandy","greenCandy","orangeCandy","purpleCandy","redCandy","yellowCandy","randomColor","useCallback","candy","Math","floor","random","length","checkForColumnOfFour","isMatch","idx","indexs","width","isColumnOfFour","every","index","isBlank","blank","forEach","s","checkForRowOfFour","notValid","includes","isRowOfFour","checkForColumnOfThree","isColumnOfThree","checkForRowOfThree","isRowOfThree","moveIntoSquareBelow","useEffect","colorArray","i","push","dragStart","e","target","dragDrop","preventDefault","dragEnd","tileDraggedId","parseInt","getAttribute","tileReplacedId","className","map","src","alt","onDragStart","draggable","onDragOver","onDragEnter","onDragLeave","onDrop","onDragEnd","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aaf666c3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/blank.fbcb9179.png\";","export default __webpack_public_path__ + \"static/media/blue-candy.73120c15.png\";","export default __webpack_public_path__ + \"static/media/green-candy.599f7016.png\";","export default __webpack_public_path__ + \"static/media/orange-candy.f106b2cd.png\";","export default __webpack_public_path__ + \"static/media/purple-candy.ae25b8a5.png\";","export default __webpack_public_path__ + \"static/media/red-candy.3658b37c.png\";","export default __webpack_public_path__ + \"static/media/yellow-candy.a3d87a9b.png\";","import { memo, useState, useEffect, useMemo, useCallback } from 'react'\nimport blank from './images/blank.png'\nimport blueCandy from './images/blue-candy.png'\nimport greenCandy from './images/green-candy.png'\nimport orangeCandy from './images/orange-candy.png'\nimport purpleCandy from './images/purple-candy.png'\nimport redCandy from './images/red-candy.png'\nimport yellowCandy from './images/yellow-candy.png'\nimport './App.scss'\n\nexport default memo(function App() {\n  const [randomColorArray, setRandomColorArray] = useState([])\n  const [tileBeingDragged, setTileBeingDragged] = useState(null)\n  const [tileBeingReplaced, setTileBeingReplaced] = useState(null)\n  const [score, setScore] = useState(0)\n\n  const candyColors = useMemo(\n    () => [\n      blueCandy,\n      greenCandy,\n      orangeCandy,\n      purpleCandy,\n      redCandy,\n      yellowCandy,\n    ],\n    []\n  )\n  const width = 8\n  const randomColor = useCallback(\n    (candy) => candy[Math.floor(Math.random() * candy.length)],\n    []\n  )\n\n  const checkForColumnOfFour = useCallback(() => {\n    let isMatch = false\n    for (let idx = 0; idx <= 39; idx++) {\n      const indexs = [idx, idx + width, idx + width * 2, idx + width * 3]\n      const isColumnOfFour = indexs.every(\n        (index) => randomColorArray[index] === randomColorArray[idx]\n      )\n      const isBlank = randomColorArray[idx] === blank\n      if (isColumnOfFour && !isBlank) {\n        // this changes randomColorArray, but does not cause DOM to update.\n        indexs.forEach((index) => (randomColorArray[index] = blank))\n        isMatch = true\n        setScore((s) => s + 4)\n        setRandomColorArray([...randomColorArray])\n      }\n    }\n    return isMatch\n  }, [randomColorArray])\n\n  const checkForRowOfFour = useCallback(() => {\n    let isMatch = false\n    const notValid = [\n      5, 6, 7, 13, 14, 15, 21, 22, 23, 29, 30, 31, 37, 38, 39, 45, 46, 47, 53,\n      54, 55, 61, 62, 63,\n    ]\n    for (let idx = 0; idx < randomColorArray.length; idx++) {\n      // board end pieces that cannot make four of a kind.\n      if (!notValid.includes(idx)) {\n        const indexs = [idx, idx + 1, idx + 2, idx + 3]\n        const isRowOfFour = indexs.every(\n          (index) => randomColorArray[index] === randomColorArray[idx]\n        )\n        const isBlank = randomColorArray[idx] === blank\n        if (isRowOfFour && !isBlank) {\n          // this changes randomColorArray, but does not cause DOM to update.\n          indexs.forEach((index) => (randomColorArray[index] = blank))\n          isMatch = true\n          setScore((s) => s + 4)\n          setRandomColorArray([...randomColorArray])\n        }\n      }\n    }\n    return isMatch\n  }, [randomColorArray])\n\n  const checkForColumnOfThree = useCallback(() => {\n    let isMatch = false\n    for (let idx = 0; idx <= 47; idx++) {\n      const indexs = [idx, idx + width, idx + width * 2]\n      const isColumnOfThree = indexs.every(\n        (index) => randomColorArray[index] === randomColorArray[idx]\n      )\n      const isBlank = randomColorArray[idx] === blank\n      if (isColumnOfThree && !isBlank) {\n        indexs.forEach((index) => (randomColorArray[index] = blank))\n        isMatch = true\n        setScore((s) => s + 3)\n        setRandomColorArray([...randomColorArray])\n      }\n    }\n    return isMatch\n  }, [randomColorArray])\n\n  const checkForRowOfThree = useCallback(() => {\n    let isMatch = false\n    const notValid = [\n      6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55, 62, 63,\n    ]\n    for (let idx = 0; idx < randomColorArray.length; idx++) {\n      if (!notValid.includes(idx)) {\n        const indexs = [idx, idx + 1, idx + 2]\n        const isRowOfThree = indexs.every(\n          (index) => randomColorArray[index] === randomColorArray[idx]\n        )\n\n        const isBlank = randomColorArray[idx] === blank\n        if (isRowOfThree && !isBlank) {\n          indexs.forEach((index) => (randomColorArray[index] = blank))\n          isMatch = true\n          setScore((s) => s + 3)\n          setRandomColorArray([...randomColorArray])\n        }\n      }\n    }\n    return isMatch\n  }, [randomColorArray])\n\n  const moveIntoSquareBelow = useCallback(() => {\n    let isMatch = false\n    //loop through all but last row. Find blank ones and move to top row.\n    for (let idx = 0; idx <= 55; idx++) {\n      // if blank is in first row, add random candy\n      const firstRow = [0, 1, 2, 3, 4, 5, 6, 7]\n      const isFirstRow = firstRow.includes(idx)\n      // if blank has made it to the first row, insert random candy color.\n      if (isFirstRow && randomColorArray[idx] === blank) {\n        randomColorArray[idx] = randomColor(candyColors)\n        setRandomColorArray([...randomColorArray])\n        isMatch = true\n      }\n\n      //move all blanks up to top\n      if (randomColorArray[idx + width] === blank) {\n        isMatch = true\n        randomColorArray[idx + width] = randomColorArray[idx]\n        randomColorArray[idx] = blank\n        setRandomColorArray([...randomColorArray])\n      }\n    }\n    return isMatch\n  }, [randomColorArray, candyColors, randomColor])\n\n  // run once on initial load.\n  useEffect(() => {\n    // Create initial randomColorArray board and add to state.\n    const colorArray = []\n    for (let i = 0; i < width * width; i++) {\n      colorArray.push(randomColor(candyColors))\n    }\n    setRandomColorArray(colorArray)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  const dragStart = useCallback((e) => setTileBeingDragged(e.target), [])\n  const dragDrop = useCallback((e) => {\n    e.preventDefault()\n    setTileBeingReplaced(e.target)\n  }, [])\n  const dragEnd = useCallback(\n    (e) => {\n      // get 'data-id' from tile\n      const tileDraggedId = parseInt(tileBeingDragged.getAttribute('data-id'))\n      const tileReplacedId = parseInt(tileBeingReplaced.getAttribute('data-id'))\n\n      const validMoves = [\n        tileDraggedId - 1,\n        tileDraggedId + 1,\n        tileDraggedId - width,\n        tileDraggedId + width,\n      ]\n\n      // check if move is valid before checking if it created a match of 3 or 4.\n      const isValidMove = validMoves.includes(tileReplacedId)\n      if (isValidMove) {\n        //make candy switch, then check if it creates 3 or 4 match.\n        randomColorArray[tileReplacedId] = tileBeingDragged.getAttribute('src')\n        randomColorArray[tileDraggedId] = tileBeingReplaced.getAttribute('src')\n        const isColumnOfFour = checkForColumnOfFour()\n        const isRowOfFour = checkForRowOfFour()\n        const isColumnOfThree = checkForColumnOfThree()\n        const isRowOfThree = checkForRowOfThree()\n\n        // if any are true, do nothing, randomColorArray has already been switched.\n        if (isColumnOfFour || isRowOfFour || isColumnOfThree || isRowOfThree) {\n          setRandomColorArray([...randomColorArray])\n        } else {\n          // if not a match, return colors back to original.\n          randomColorArray[tileReplacedId] =\n            tileBeingReplaced.getAttribute('src')\n          randomColorArray[tileDraggedId] = tileBeingDragged.getAttribute('src')\n          // no need to update state, nothing was changed.\n        }\n      }\n    },\n    [\n      checkForColumnOfFour,\n      checkForColumnOfThree,\n      checkForRowOfFour,\n      checkForRowOfThree,\n      randomColorArray,\n      tileBeingDragged,\n      tileBeingReplaced,\n    ]\n  )\n\n  //run all functions when there is change to randomColorArray.\n  useEffect(() => {\n    //needed because logic counts empty squares during initial build as matches.\n    if (randomColorArray.length === 64) {\n      checkForColumnOfFour()\n      checkForRowOfFour()\n      checkForColumnOfThree()\n      checkForRowOfThree()\n      moveIntoSquareBelow()\n    }\n  }, [randomColorArray, checkForColumnOfFour, checkForRowOfFour, checkForColumnOfThree, checkForRowOfThree, moveIntoSquareBelow])\n\n  return useMemo(\n    () => (\n      <div className=\"candy-wrapper\">\n        <h1>Candy Crush</h1>\n        <h1>Score: {score}</h1>\n        <div className=\"candy-game\">\n          {randomColorArray.map((candy, idx) => (\n            <img\n              key={idx}\n              src={candy}\n              alt={idx}\n              data-id={idx}\n              onDragStart={dragStart}\n              draggable={true}\n              onDragOver={(e) => e.preventDefault()}\n              onDragEnter={(e) => e.preventDefault()}\n              onDragLeave={(e) => e.preventDefault()}\n              onDrop={dragDrop}\n              onDragEnd={dragEnd}\n            />\n          ))}\n        </div>\n        <div className=\"candy-rules\">\n          Candy Crush Rules\n          <ul>\n            <li>\n              You can only move one space at a time: up, down, left, right\n            </li>\n            <li>\n              The moved tile must make three or four of a kind to be a valid\n              move\n            </li>\n          </ul>\n        </div>\n      </div>\n    ),\n    [score, randomColorArray, dragStart, dragDrop, dragEnd]\n  )\n})\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}